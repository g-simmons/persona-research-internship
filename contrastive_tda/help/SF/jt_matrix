`SF/text/jt_matrix` := TEXT(
`   `,
`FUNCTION:  jt_matrix - Jacobi-Trudi matrix of a (possibly skew) partition`,
`   `,
`CALLING SEQUENCE:  jt_matrix(lambda);`,
`                   jt_matrix(lambda,mu);`,
`                   jt_matrix(lambda,mu,b);`,
`   `,
`PARAMETERS:  lambda,mu = partitions`,
`                 b     = (optional) a name`,
`   `,
`SYNOPSIS:`,
`  If lambda is a partition with l parts, the Jacobi-Trudi matrix associated`,
`  to lambda is an l x l matrix whose [i,j] entry is the complete homogeneous`,
`  symmetric function h.(lambda[i]-i+j). The determinant of this matrix is`,
`  the Schur function s[lambda]. `,
`   `,
`  More generally, if mu is a second partition, then the Jacobi-Trudi matrix `,
`  associated to the "skew shape" lambda/mu is the matrix whose [i,j] entry`,
`  is h.(lambda[i]-mu[j]-i+j). Its determinant is the skew Schur function`,
`  indexed by lambda/mu. In particular, the determinant is 0 unless mu is a`,
`  subpartition of lambda.`,
`   `,
`  jt_matrix(lambda) returns the Jacobi-Trudi matrix associated to lambda.`,
`   `,
`  jt_matrix(lambda,mu) does the same for the skew shape lambda/mu.`,
`   `,
`  If a third argument 'b', is present, then the matrix returned uses b as`,
`  the base name for the entries of the matrix rather than (the default) h.`,
`   `,
`EXAMPLES:`,
`  jt_matrix([4,2,1]);           yields   `,
`                                   array([[h4,h5,h6], [h1,h2,h3], [0,1,h1]])`,
`  jt_matrix([5,3,2],[3,2],q);   yields`,
`                                    array([[q2,q4,q7], [0,q1,q4], [0,0,q2]])`,
`   `,
`SEE ALSO:  conjugate, skew, subPar, tos`,
NULL):

if `+`(0)=0 then # Maple V.4 or later
  print(INTERFACE_HELP(insert, topic=`SF/jt_matrix`,
  helpfile=HomeLib, text=`SF/text/jt_matrix`))
elif ceil(0)=0 then # Maple V.2 or V.3
  `help/SF/text/jt_matrix`:=`SF/text/jt_matrix`:
  save `help/SF/text/jt_matrix`, cat(HomeLib,`/help/SF/text/jt_matrix.m`);
fi:
