`SF/text/Par` := TEXT(
`   `,
`FUNCTION:  Par - list partitions`,
`   `,
`CALLING SEQUENCE:  Par(n);  Par(n,l);  Par(n,k,l);`,
`   `,
`PARAMETERS:  n = a nonnegative integer`,
`             l = (optional) maximum number of parts allowed`,
`             k = (optional) maximum part size allowed`,
`   `,
`SYNOPSIS:`,
`  A partition of n is defined to be a non-increasing list of positive`,
`  integers with sum n. The members of the list are called parts.`,
`   `,
`  Par(n) returns a list consisting of all partitions of n.`,
`   `,
`  Par(n,l) returns a list of all partitions of n with at most l parts.`,
`   `,
`  Par(n,k,l) returns a list of all partitions of n with at most l parts`,
`  such that every part is <= k.`,
`   `,
`  In all cases, the list of partitions is arranged in lexicographic order;`,
`  i.e., mu precedes nu if we have mu[1]=nu[1], ..., mu[i-1]=nu[i-1],`,
`  and mu[i]>nu[i] for some i >= 1. This total ordering is a refinement of`,
`  the dominance partial order (see 'dominate').`,
`   `,
`EXAMPLES:`,
`  Par(4);            yields      [[4], [3,1], [2,2], [2,1,1], [1,1,1,1]]`,
`  Par(7,2);          yields            [[7], [6,1], [5,2], [4,3]]`,
`  Par(9,4,3);        yields            [[4,4,1], [4,3,2], [3,3,3]]`,
`   `,
`SEE ALSO:  conjugate, dominate, nextPar, subPar`,
NULL):

if `+`(0)=0 then # Maple V.4 or later
  print(INTERFACE_HELP(insert, topic=`SF/Par`,
  helpfile=HomeLib, text=`SF/text/Par`))
elif ceil(0)=0 then # Maple V.2 or V.3
  `help/SF/text/Par`:=`SF/text/Par`:
  save `help/SF/text/Par`, cat(HomeLib,`/help/SF/text/Par.m`);
fi:
