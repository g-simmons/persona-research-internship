`SF/text/sf2char` := TEXT(
`   `,
`FUNCTION:  sf2char - convert symmetric functions to (virtual) characters`,
`   `,
`CALLING SEQUENCE:  sf2char(f);`,
`                   sf2char(f,b);`,
`   `,
`PARAMETERS:  f = a symmetric function`,
`             b = (optional) a basis name`,
`   `,
`SYNOPSIS:`,
`  The characteristic map is an isometric isomorphism between symmetric`,
`  functions that are homogeneous of degree n and class functions on the`,
`  symmetric group S_n (i.e., functions constant on conjugacy classes).`,
`   `,
`  Under this map, the Schur function s[lambda] corresponds to the`,
`  irreducible character of S_n indexed by lambda, and the power sum indexed`,
`  by lambda corresponds to the function that takes on the value zee(lambda)`,
`  for all permutations of cycle-type lambda, and 0 otherwise.`,
`   `,
`  For any symmetric function f, sf2char(f) returns the class function`,
`  corresponding to f. The result is expressed as a linear combination of`,
`  expressions of the form cl[lambda], where cl[lambda] denotes the class`,
`  function that takes the value 1 at cycle-type lambda, and 0 otherwise.`,
`  In particular, the coefficient of cl[1,1,1,...] is the degree of the`,
`  (possibly virtual) character corresponding to f.`,
`   `,
`  A basis name b may be optionally given as a second argument to specify`,
`  that f is expressed solely in terms of the basis b. If b is not one of`,
`  the predefined bases, this requires f to be linear in elements of b.`,
`   `,
`EXAMPLES:`,
`  sf2char((p1+p2)^2);        yields        8*cl[2,2]+4*cl[2,1]+2*cl[1,1]`,
`  sf2char(s[3,1],s);         yields    3*cl[1,1,1,1]+cl[2,1,1]-cl[2,2]-cl[4]`,
`   `,
`SEE ALSO:  char2sf, itensor, plethysm, zee, combinat[Chi]`,
NULL):

if `+`(0)=0 then # Maple V.4 or later
  print(INTERFACE_HELP(insert, topic=`SF/sf2char`,
  helpfile=HomeLib, text=`SF/text/sf2char`))
elif ceil(0)=0 then # Maple V.2 or V.3
  `help/SF/text/sf2char`:=`SF/text/sf2char`:
  save `help/SF/text/sf2char`, cat(HomeLib,`/help/SF/text/sf2char.m`);
fi:
