`SF/text/scalar` := TEXT(
`   `,
`FUNCTION:  scalar - scalar product of symmetric functions`,
`   `,
`CALLING SEQUENCE:  scalar(f,g);       scalar(f,g,b1,b2);`,
`                   scalar(f,g,scp);   scalar(f,g,b1,b2,scp);`,
`   `,
`PARAMETERS:   f,g  = symmetric functions`,
`             b1,b2 = (optional) names of bases`,
`              scp  = (optional) a procedure that accepts partitions as input`,
`   `,
`SYNOPSIS:`,
`  Let < , > be a scalar product of symmetric functions in which the power`,
`  sums are orthogonal, and let 'scp' be a procedure such that scp(mu)`,
`  computes the squared norm of the power sum indexed by mu. The standard`,
`  scalar product is obtained by choosing scp=zee.`,
`   `,
`  If f and g are symmetric functions and 'scp' is as described, then`,
`  scalar(f,g,scp) computes the scalar product of f and g. If the last`,
`  argument 'scp' is omitted, then by default the standard scalar product`,
`  is computed. Hence scalar(f,g) is equivalent to scalar(f,g,zee).`,
`   `,
`  If two additional arguments b1 and b2 are specified, then f and g are`,
`  assumed to be expressed solely in terms of the bases b1 and b2, resp.`,
`  In particular, if (say) b1 is not one of the predefined bases, this`,
`  requires f to be linear in the members of b1.`,
`   `,
`EXAMPLES:`,
`  scalar(s[3,2],h2*h1^3);            yields                3`,
`  scalar(s[3,1,1],e3*e2,s,e);        yields                0`,
`  Zee:=mu -> zee(mu,q^2,q);`,
`  c:=scalar(s[2,1],s[2,1],Zee);`,
`  normal(c);                         yields          q^3+2*q^2+2*q+1`,
`  dual_basis(m,h);`,
`  c:=scalar(m[3,1]+m[2,1],p3*(1+p1),m,p,Zee);`,
`  normal(c);                         yields           3*q*(q^3+1)`,
`   `,
`SEE ALSO:  add_basis, dual_basis, skew, zee`,
NULL):

if `+`(0)=0 then # Maple V.4 or later
  print(INTERFACE_HELP(insert, topic=`SF/scalar`,
  helpfile=HomeLib, text=`SF/text/scalar`))
elif ceil(0)=0 then # Maple V.2 or V.3
  `help/SF/text/scalar`:=`SF/text/scalar`:
  save `help/SF/text/scalar`, cat(HomeLib,`/help/SF/text/scalar.m`);
fi:
