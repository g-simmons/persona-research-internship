`SF/text/subPar` := TEXT(
`   `,
`FUNCTION:  subPar - list all subpartitions of a partition`,
`   `,
`CALLING SEQUENCE:  subPar(lambda);  subPar(lambda,n);`,
`   `,
`PARAMETERS:  lambda = a partition`,
`               n    = (optional) a nonnegative integer`,
`   `,
`SYNOPSIS:`,
`  If lambda and mu are partitions, then mu is a subpartition of lambda if`,
`  nops(mu) <= nops(lambda) and mu[i] <= lambda[i] for i=1,...,nops(mu).`,
`   `,
`  subPar(lambda) returns a list consisting of all subpartitions of lambda.`,
`   `,
`  subPar(lambda,n) returns a list consisting of all partitions of n that`,
`  are subpartitions of lambda.`,
`   `,
`  In both cases, the list of partitions is arranged in lexicographic order;`,
`  i.e., mu precedes nu if we have mu[1]=nu[1], ..., mu[i-1]=nu[i-1],`,
`  and mu[i]>nu[i] for some i >= 1.`,
`   `,
`EXAMPLES:`,
`  subPar([2,2]);       yields         [[2,2], [2,1], [2], [1,1], [1], []]`,
`  subPar([4,3,2],7);   yields          [[4,3], [4,2,1], [3,3,1], [3,2,2]]`,
`   `,
`SEE ALSO:  Par, conjugate, dominate, nextPar`,
NULL):

if `+`(0)=0 then # Maple V.4 or later
  print(INTERFACE_HELP(insert, topic=`SF/subPar`,
  helpfile=HomeLib, text=`SF/text/subPar`))
elif ceil(0)=0 then # Maple V.2 or V.3
  `help/SF/text/subPar`:=`SF/text/subPar`:
  save `help/SF/text/subPar`, cat(HomeLib,`/help/SF/text/subPar.m`);
fi:
