`SF/text/hooks` := TEXT(
`   `,
`FUNCTION:  hooks - hook lengths of a partition`,
`   `,
`CALLING SEQUENCE:  hooks(lambda);`,
`                   hooks(lambda,a);`,
`                   hooks(lambda,q,t);`,
`   `,
`PARAMETERS:  lambda = a partition`,
`             a,q,t  = (optional) expressions`,
`   `,
`SYNOPSIS:`,
`  If lambda is a partition, the hook lengths of lambda are the numbers`,
`  lambda[i] - i + mu[j] - j + 1, where mu is the conjugate of lambda`,
`  (see 'conjugate'), and (i,j) ranges over all cells of the diagram of`,
`  lambda; i.e., 1 <= j <= lambda[i] and 1 <= i <= nops(lambda).`,
`   `,
`  The arm and leg lengths of cell (i,j) are lambda[i] - j and mu[j] - i.`,
`   `,
`  For any partition lambda, hooks(lambda) returns the list of hook lengths`,
`  of lambda, sorted into non-increasing order. If one or two additional`,
`  (optional) arguments are supplied, then the procedure returns one of the`,
`  following hook-related polynomials:`,
`   `,
`  With one extra argument a, the result is the product of`,
`   `,
`               a * arm_length[i,j] + leg_length[i,j] + 1`,
`   `,
`  over all cells of the diagram.`,
`   `,
`  With two extra arguments, say q and t, the result is the product of`,
`   `,
`             1 - q^arm_length[i,j] * t^(1+leg_length[i,j])`,
`   `,
`  over all cells of the diagram.`,
`   `,
`  Note that hooks(lambda,q,q) is the product of 1 - q^hook_length[i,j].`,
`   `,
`EXAMPLES:`,
`### Compute the number of  standard tableaux of shape [3,2,1]:`,
`  hk:=hooks([3,2,1]);    yields               [5, 3, 3, 1, 1, 1]`,
`  6!/convert(hk,``*``);    yields                      16 `,
`   `,
`  hooks([3,2,1],z);      yields                (2*z+3)*(z+2)^2`,
`  hooks([3,1,1,1],q,t);  yields  (1-q^2*t^4)*(1-q*t)*(1-t)^2*(1-t^3)*(1-t^2)`,
`   `,
`SEE ALSO:  Par, conjugate`,
NULL):

if `+`(0)=0 then # Maple V.4 or later
  print(INTERFACE_HELP(insert, topic=`SF/hooks`,
  helpfile=HomeLib, text=`SF/text/hooks`))
elif ceil(0)=0 then # Maple V.2 or V.3
  `help/SF/text/hooks`:=`SF/text/hooks`:
  save `help/SF/text/hooks`, cat(HomeLib,`/help/SF/text/hooks.m`);
fi:
